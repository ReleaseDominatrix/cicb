dnl File:        configure.in
dnl Revision:    1.0
dnl Created:     00/09/29
dnl Author:      Michel Hoche-Mong (hoche@grok.com)
dnl $Id: configure.in,v 1.24 2009/04/04 09:08:40 hoche Exp $
dnl

AC_INIT
AC_CONFIG_SRCDIR(icb/main.c)
AC_CONFIG_HEADER(config.h)
AC_LANG(C)

dnl
dnl Some standard autoconfig stuff
dnl
AC_PROG_MAKE_SET
AC_PROG_CC

if [[ x"$GCC" = x"yes" ]]; then
  CFLAGS="$CFLAGS -Wall"
fi

AC_PROG_CPP
dnl these checks are inane. make them be useful, hoche. -hoche.
AC_CHECK_PROG(RM, rm, rm, rm)
AC_CHECK_PROG(AR, ar, ar, ar)
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PATH_PROG(UNAME, uname, "")
AC_AIX
AC_ISC_POSIX

dnl
dnl standard type checking
dnl
AC_TYPE_SIGNAL
AC_CHECK_HEADERS([libgen.h])
AC_CHECK_FUNCS(strstr lrand48)

dnl
dnl Find libraries, functions and special programs
dnl
AC_CHECK_LIB(resolv, _res)
AC_CHECK_LIB(socket, socket, LIBS="$LIBS -lsocket -lnsl")
dnl readline needs termcap
AC_CHECK_LIB(termcap, tputs, LIBS="$LIBS -ltermcap", [
  dnl hunt for shared libs
  AC_MSG_CHECKING(for tputs in libtermcap.so)
  for i in /lib \
           /usr/lib \
           /usr/local/lib \
           ; do
      for j in `find $i -name "*termcap*" -print`; do
          orig_libs=$LIBS
	  LIBS="$LIBS $j"
          AC_TRY_LINK([
            #include <stdio.h>
          ], [
            tputs();
          ], [
             AC_MSG_RESULT(shared library is $j)
          ], LIBS=${orig_libs})

	  if test x"${LIBS}" != x"${orig_libs}"; then
	     break 2;
          fi
      done
  done
])
dnl TCL needs these
AC_CHECK_LIB(m, sqrt)
AC_CHECK_LIB(dl, dlsym)
dnl solaris needs this for signals
AC_CHECK_LIB(ucb,sigblock, LIBS="$LIBS -lucb")


dnl
dnl Here we define some --with & --enable things:
dnl
AC_ARG_ENABLE(debugging,
[  --enable-debugging      Outputs extra debugging information at all
                          times.  Normally, you should not enable this,
                          but instead use the -D flag of the commands,
                          which toggles debbuging output at runtime.
  --disable-debugging     Disallows debugging code to be built in.
                          This might provide some speed benefits.],
    AC_DEFINE([DEBUG], [], [Defined if debugging is enabled.])
             )

AC_ARG_ENABLE(developer,
[  --enable-developer      Turns on super-duper-extra-compile-warnings
                          when using gcc.],
    developer=yes
             )

AC_ARG_WITH(ssl,
[  --with-ssl              Enable SSL using OpenSSL. (Experimental)],
    ssl="$with_ssl", ssl="no")

AC_ARG_ENABLE(static, 
[  --enable-static[=ARG]   With static linking.],
	ICB_AC_SET_STATIC(enable_static), enable_static="" )

AC_ARG_WITH(default-host,
[  --with-default-host=\"default.icb.net\"       Default icb server.],
    icb_default_host="$with_default_host")

AC_ARG_WITH(default-port,
[  --with-default-port=7326      Default port to connect to.],
    icb_default_port="$with_default_port")


dnl
dnl was developer mode set?
dnl
AC_MSG_CHECKING(for developer flags)
if test "x$developer" = "xyes" -a "x$ac_cv_prog_gcc" = "xyes"; then
  devflags="-W -Wall"
  #devflags="$devflags -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wwrite-strings -Wconversion -Wsign-compare -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls -Wnested-externs"
  CFLAGS="$CFLAGS $devflags"
else
  devflags="none"
fi
AC_MSG_RESULT($devflags)

dnl
dnl was static set?
dnl
AC_MSG_CHECKING(for static linking flag)
if test x"$enable_static" != x; then
	dnl not sure if it's right to just include -lc here
	LIBS="$LIBS -lc"
	STATICFLAG=$enable_static
	AC_MSG_RESULT([$enable_static])
else
	STATICFLAG=""
	AC_MSG_RESULT(Not using static linking)
fi
AC_SUBST(STATICFLAG)

dnl
dnl compiling on MacOSX?
dnl
AC_MSG_CHECKING(if we're building on MacOS X)
if test `uname -s` = Darwin; then
  AC_MSG_RESULT(yes.  I'll use -all_load when linking.)
  LDFLAGS="$LDFLAGS -all_load"
else
  AC_MSG_RESULT(no)
fi

dnl Locate TCL and readline
dnl
ICB_AC_PATH_READLINE
ICB_AC_PATH_TCL

AH_TEMPLATE([HAVE_SSL])
AH_TEMPLATE([DEFAULT_SSL_PORT], [Default server port to connect to when using SSL.])

    dnl Locate SSL libs.
if test x"$ssl" = x"yes" ; then
    dnl Order matters!
    if test "$PORTNAME" != "win32"; then
        AC_SEARCH_LIBS(CRYPTO_new_ex_data, crypto, [], [AC_MSG_ERROR([library 'crypto' is required for OpenSSL])])
        FOUND_SSL_LIB="no"
        FOUND_TLS_CLIENT_METHOD="no"
        AC_SEARCH_LIBS(OPENSSL_init_ssl, ssl, [], [FOUND_SSL_LIB="yes"])
        AC_SEARCH_LIBS(SSL_library_init, ssl, [], [FOUND_SSL_LIB="yes"])
        AC_SEARCH_LIBS(TLS_client_method, ssl)
        AS_IF([test "x$FOUND_SSL_LIB" = xno], [AC_MSG_ERROR([library 'ssl' is required for OpenSSL])])
    else
        AC_SEARCH_LIBS(CRYPTO_new_ex_data, eay32 crypto, [], [AC_MSG_ERROR([library 'eay32' or 'crypto' is required for OpenSSL])])
        FOUND_SSL_LIB="no"
        AC_SEARCH_LIBS(OPENSSL_init_ssl, ssleay32 ssl, [FOUND_SSL_LIB="yes"])
        AC_SEARCH_LIBS(SSL_library_init, ssleay32 ssl, [FOUND_SSL_LIB="yes"])
        AS_IF([test "x$FOUND_SSL_LIB" = xno], [AC_MSG_ERROR([library 'ssleay32' or 'ssl' is required for OpenSSL])])
    fi
fi
if test x"$FOUND_SSL_LIB" = x"yes" ; then
AC_DEFINE([HAVE_SSL], [], [Define to enable SSL])
    if test "x$icb_default_ssl_port" = "x"; then
        AC_CACHE_CHECK("default server ssl port", ac_cv_icb_default_ssl_port, [
                   ac_cv_icb_default_ssl_port="7327" ])
    else
        ac_cv_icb_default_ssl_port=`eval echo "${icb_default_ssl_port}"`
    fi
    AC_DEFINE_UNQUOTED(DEFAULT_SSL_PORT, $ac_cv_icb_default_ssl_port)
    AC_CHECK_FUNCS(TLS_client_method)
fi


dnl
dnl set default port
dnl
if test "x$icb_default_port" = "x"; then
	AC_CACHE_CHECK("default server port", ac_cv_icb_default_port, [
		ac_cv_icb_default_port="7326" ])
else
	ac_cv_icb_default_port=`eval echo "${icb_default_port}"`
fi
AC_DEFINE_UNQUOTED([DEFAULT_PORT], $ac_cv_icb_default_port, [Default port to connect to.])


dnl
dnl set default host
dnl
if test "x$icb_default_host" = "x"; then
	AC_CACHE_CHECK("default server", ac_cv_icb_default_host, [
		ac_cv_icb_default_host="default.icb.net" ])
else
	ac_cv_icb_default_host=`eval echo "${icb_default_host}"`
fi
AC_DEFINE_UNQUOTED([DEFAULT_HOST], "$ac_cv_icb_default_host", [Default host to connect to.])


dnl
dnl precheck prefix before setting datadir
dnl
if test "x${prefix}" = "xNONE" -o "x${prefix}" = "x" ; then
	prefix="/usr/local"
fi

dnl
dnl set datadir
dnl this is a bloody horrible kludge of a way to change the datadir default
dnl from ${prefix}/share to ${prefix}/share/icb, and means that you can't
dnl use --datadir to set it back to ${prefix}/share, but until something
dnl better comes along, it'll have to do.  Besides, ${prefix}/share is Just
dnl Wrong anyway.
dnl
def_datadir=`eval echo "${prefix}/share"`
actual_datadir=`eval echo "${datadir}"`
if test "x${actual_datadir}" = "x" -o "x${actual_datadir}" = "x${def_datadir}" ; then
        icb_sys_datadir=`eval echo "${prefix}/share/icb"`
else
        icb_sys_datadir=`eval echo "${actual_datadir}"`
fi
datadir=${icb_sys_datadir}
icb_server_db=`eval echo "${icb_sys_datadir}/icbserverdb"`
AC_DEFINE_UNQUOTED(ICB_SYS_DATADIR, "$icb_sys_datadir", [Directory to store the system files like icbserverdb])

AC_DEFINE_UNQUOTED(SERVERLIST, "$icb_server_db", [The full path to the icbserverdb file])

dnl
dnl OK! Done! Generate the files.
dnl
AC_OUTPUT(Makefile icb/Makefile, echo timestamp > stamp-h)
